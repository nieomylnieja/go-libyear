// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nieomylnieja/go-libyear/internal (interfaces: GitCmdI)
//
// Generated by this command:
//
//	mockgen -destination mocks/git.go -package mocks -typed . GitCmdI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGitCmdI is a mock of GitCmdI interface.
type MockGitCmdI struct {
	ctrl     *gomock.Controller
	recorder *MockGitCmdIMockRecorder
}

// MockGitCmdIMockRecorder is the mock recorder for MockGitCmdI.
type MockGitCmdIMockRecorder struct {
	mock *MockGitCmdI
}

// NewMockGitCmdI creates a new mock instance.
func NewMockGitCmdI(ctrl *gomock.Controller) *MockGitCmdI {
	mock := &MockGitCmdI{ctrl: ctrl}
	mock.recorder = &MockGitCmdIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitCmdI) EXPECT() *MockGitCmdIMockRecorder {
	return m.recorder
}

// Checkout mocks base method.
func (m *MockGitCmdI) Checkout(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout.
func (mr *MockGitCmdIMockRecorder) Checkout(arg0, arg1 any) *MockGitCmdICheckoutCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockGitCmdI)(nil).Checkout), arg0, arg1)
	return &MockGitCmdICheckoutCall{Call: call}
}

// MockGitCmdICheckoutCall wrap *gomock.Call
type MockGitCmdICheckoutCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitCmdICheckoutCall) Return(arg0 error) *MockGitCmdICheckoutCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitCmdICheckoutCall) Do(f func(string, string) error) *MockGitCmdICheckoutCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitCmdICheckoutCall) DoAndReturn(f func(string, string) error) *MockGitCmdICheckoutCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Clone mocks base method.
func (m *MockGitCmdI) Clone(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockGitCmdIMockRecorder) Clone(arg0, arg1 any) *MockGitCmdICloneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGitCmdI)(nil).Clone), arg0, arg1)
	return &MockGitCmdICloneCall{Call: call}
}

// MockGitCmdICloneCall wrap *gomock.Call
type MockGitCmdICloneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitCmdICloneCall) Return(arg0 error) *MockGitCmdICloneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitCmdICloneCall) Do(f func(string, string) error) *MockGitCmdICloneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitCmdICloneCall) DoAndReturn(f func(string, string) error) *MockGitCmdICloneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHeadBranchName mocks base method.
func (m *MockGitCmdI) GetHeadBranchName(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeadBranchName", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeadBranchName indicates an expected call of GetHeadBranchName.
func (mr *MockGitCmdIMockRecorder) GetHeadBranchName(arg0 any) *MockGitCmdIGetHeadBranchNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeadBranchName", reflect.TypeOf((*MockGitCmdI)(nil).GetHeadBranchName), arg0)
	return &MockGitCmdIGetHeadBranchNameCall{Call: call}
}

// MockGitCmdIGetHeadBranchNameCall wrap *gomock.Call
type MockGitCmdIGetHeadBranchNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitCmdIGetHeadBranchNameCall) Return(arg0 string, arg1 error) *MockGitCmdIGetHeadBranchNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitCmdIGetHeadBranchNameCall) Do(f func(string) (string, error)) *MockGitCmdIGetHeadBranchNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitCmdIGetHeadBranchNameCall) DoAndReturn(f func(string) (string, error)) *MockGitCmdIGetHeadBranchNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListTags mocks base method.
func (m *MockGitCmdI) ListTags(arg0 string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", arg0)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags.
func (mr *MockGitCmdIMockRecorder) ListTags(arg0 any) *MockGitCmdIListTagsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockGitCmdI)(nil).ListTags), arg0)
	return &MockGitCmdIListTagsCall{Call: call}
}

// MockGitCmdIListTagsCall wrap *gomock.Call
type MockGitCmdIListTagsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitCmdIListTagsCall) Return(arg0 io.Reader, arg1 error) *MockGitCmdIListTagsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitCmdIListTagsCall) Do(f func(string) (io.Reader, error)) *MockGitCmdIListTagsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitCmdIListTagsCall) DoAndReturn(f func(string) (io.Reader, error)) *MockGitCmdIListTagsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Pull mocks base method.
func (m *MockGitCmdI) Pull(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pull indicates an expected call of Pull.
func (mr *MockGitCmdIMockRecorder) Pull(arg0 any) *MockGitCmdIPullCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockGitCmdI)(nil).Pull), arg0)
	return &MockGitCmdIPullCall{Call: call}
}

// MockGitCmdIPullCall wrap *gomock.Call
type MockGitCmdIPullCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitCmdIPullCall) Return(arg0 error) *MockGitCmdIPullCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitCmdIPullCall) Do(f func(string) error) *MockGitCmdIPullCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitCmdIPullCall) DoAndReturn(f func(string) error) *MockGitCmdIPullCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
